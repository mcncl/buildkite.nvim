name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nvim-version: ['v0.7.0', 'v0.8.0', 'v0.9.0', 'stable']
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Neovim
        run: |
          if [ "${{ matrix.nvim-version }}" = "stable" ]; then
            DOWNLOAD_URL="https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.appimage"
          else
            DOWNLOAD_URL="https://github.com/neovim/neovim/releases/download/${{ matrix.nvim-version }}/nvim.appimage"
          fi
          
          curl -L $DOWNLOAD_URL -o nvim.appimage
          chmod +x nvim.appimage
          
          # Extract AppImage instead of running directly
          ./nvim.appimage --appimage-extract
          sudo mv squashfs-root /usr/local/
          sudo ln -sf /usr/local/squashfs-root/usr/bin/nvim /usr/local/bin/nvim
      
      - name: Install dependencies
        run: |
          mkdir -p ~/.local/share/nvim/site/pack/deps/start
          git clone https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/deps/start/plenary.nvim
          # Link the plugin itself to the runtime path
          ln -s $(pwd) ~/.local/share/nvim/site/pack/deps/start/buildkite.nvim
      
      - name: Run health check
        run: |
          nvim --headless -c "lua require('buildkite.health').check()" -c "qa!"

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate ZeroVer format (must start with v0.)
          if [[ ! "$VERSION" =~ ^v0\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "🚫 This project uses ZeroVer (0-based versioning)."
            echo "✅ Valid format: v0.x.x (e.g., v0.1.0, v0.2.0-beta.1)"
            echo "🔗 Learn more: https://0ver.org/"
            exit 1
          fi
          
          echo "✅ Valid ZeroVer format: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release
            CHANGES=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Changes since last tag
            CHANGES=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save to file for multiline output
          echo "$CHANGES" > changelog.txt
          
          # Also create a formatted version
          echo "## What's Changed" > formatted_changelog.md
          echo "" >> formatted_changelog.md
          echo "$CHANGES" >> formatted_changelog.md
          echo "" >> formatted_changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ steps.version.outputs.version }}" >> formatted_changelog.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: formatted_changelog.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}